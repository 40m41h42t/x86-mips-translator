
./t2：     文件格式 elf32-i386
./t2
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x08048370

程序头：
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x00000120 memsz 0x00000120 flags r-x
  INTERP off    0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x000006a0 memsz 0x000006a0 flags r-x
    LOAD off    0x00000f08 vaddr 0x08049f08 paddr 0x08049f08 align 2**12
         filesz 0x0000012c memsz 0x00000130 flags rw-
 DYNAMIC off    0x00000f14 vaddr 0x08049f14 paddr 0x08049f14 align 2**2
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
    NOTE off    0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2
         filesz 0x00000044 memsz 0x00000044 flags r--
EH_FRAME off    0x00000580 vaddr 0x08048580 paddr 0x08048580 align 2**2
         filesz 0x00000034 memsz 0x00000034 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-
   RELRO off    0x00000f08 vaddr 0x08049f08 paddr 0x08049f08 align 2**0
         filesz 0x000000f8 memsz 0x000000f8 flags r--

动态节：
  NEEDED               libc.so.6
  INIT                 0x080482f0
  FINI                 0x08048564
  INIT_ARRAY           0x08049f08
  INIT_ARRAYSZ         0x00000004
  FINI_ARRAY           0x08049f0c
  FINI_ARRAYSZ         0x00000004
  GNU_HASH             0x080481ac
  STRTAB               0x0804822c
  SYMTAB               0x080481cc
  STRSZ                0x00000067
  SYMENT               0x00000010
  DEBUG                0x00000000
  PLTGOT               0x0804a000
  PLTRELSZ             0x00000018
  PLTREL               0x00000011
  JMPREL               0x080482d8
  REL                  0x080482d0
  RELSZ                0x00000008
  RELENT               0x00000008
  VERNEED              0x080482a0
  VERNEEDNUM           0x00000001
  VERSYM               0x08048294

版本引用：
  required from libc.so.6:
    0x0d696910 0x00 03 GLIBC_2.0
    0x0d696914 0x00 02 GLIBC_2.4

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000013  08048154  08048154  00000154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  08048168  08048168  00000168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  08048188  08048188  00000188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     00000020  080481ac  080481ac  000001ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000060  080481cc  080481cc  000001cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000067  0804822c  0804822c  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  0000000c  08048294  08048294  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000030  080482a0  080482a0  000002a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  080482d0  080482d0  000002d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000018  080482d8  080482d8  000002d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000023  080482f0  080482f0  000002f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000040  08048320  08048320  00000320  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000008  08048360  08048360  00000360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         000001f2  08048370  08048370  00000370  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000014  08048564  08048564  00000564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000008  08048578  08048578  00000578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 00000034  08048580  08048580  00000580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000ec  080485b4  080485b4  000005b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000004  08049f08  08049f08  00000f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000004  08049f0c  08049f0c  00000f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .jcr          00000004  08049f10  08049f10  00000f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .dynamic      000000e8  08049f14  08049f14  00000f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got          00000004  08049ffc  08049ffc  00000ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got.plt      00000018  0804a000  0804a000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         0000001c  0804a018  0804a018  00001018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000004  0804a034  0804a034  00001034  2**0
                  ALLOC
 26 .comment      0000002d  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08048154 l    d  .interp	00000000              .interp
08048168 l    d  .note.ABI-tag	00000000              .note.ABI-tag
08048188 l    d  .note.gnu.build-id	00000000              .note.gnu.build-id
080481ac l    d  .gnu.hash	00000000              .gnu.hash
080481cc l    d  .dynsym	00000000              .dynsym
0804822c l    d  .dynstr	00000000              .dynstr
08048294 l    d  .gnu.version	00000000              .gnu.version
080482a0 l    d  .gnu.version_r	00000000              .gnu.version_r
080482d0 l    d  .rel.dyn	00000000              .rel.dyn
080482d8 l    d  .rel.plt	00000000              .rel.plt
080482f0 l    d  .init	00000000              .init
08048320 l    d  .plt	00000000              .plt
08048360 l    d  .plt.got	00000000              .plt.got
08048370 l    d  .text	00000000              .text
08048564 l    d  .fini	00000000              .fini
08048578 l    d  .rodata	00000000              .rodata
08048580 l    d  .eh_frame_hdr	00000000              .eh_frame_hdr
080485b4 l    d  .eh_frame	00000000              .eh_frame
08049f08 l    d  .init_array	00000000              .init_array
08049f0c l    d  .fini_array	00000000              .fini_array
08049f10 l    d  .jcr	00000000              .jcr
08049f14 l    d  .dynamic	00000000              .dynamic
08049ffc l    d  .got	00000000              .got
0804a000 l    d  .got.plt	00000000              .got.plt
0804a018 l    d  .data	00000000              .data
0804a034 l    d  .bss	00000000              .bss
00000000 l    d  .comment	00000000              .comment
00000000 l    df *ABS*	00000000              crtstuff.c
08049f10 l     O .jcr	00000000              __JCR_LIST__
080483b0 l     F .text	00000000              deregister_tm_clones
080483e0 l     F .text	00000000              register_tm_clones
08048420 l     F .text	00000000              __do_global_dtors_aux
0804a034 l     O .bss	00000001              completed.7200
08049f0c l     O .fini_array	00000000              __do_global_dtors_aux_fini_array_entry
08048440 l     F .text	00000000              frame_dummy
08049f08 l     O .init_array	00000000              __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000              t2.c
00000000 l    df *ABS*	00000000              crtstuff.c
0804869c l     O .eh_frame	00000000              __FRAME_END__
08049f10 l     O .jcr	00000000              __JCR_END__
00000000 l    df *ABS*	00000000              
08049f0c l       .init_array	00000000              __init_array_end
08049f14 l     O .dynamic	00000000              _DYNAMIC
08049f08 l       .init_array	00000000              __init_array_start
08048580 l       .eh_frame_hdr	00000000              __GNU_EH_FRAME_HDR
0804a000 l     O .got.plt	00000000              _GLOBAL_OFFSET_TABLE_
08048560 g     F .text	00000002              __libc_csu_fini
00000000  w      *UND*	00000000              _ITM_deregisterTMCloneTable
080483a0 g     F .text	00000004              .hidden __x86.get_pc_thunk.bx
0804a018  w      .data	00000000              data_start
0804a034 g       .data	00000000              _edata
0804846b g     F .text	0000001a              callcopy
08048564 g     F .fini	00000000              _fini
00000000       F *UND*	00000000              __stack_chk_fail@@GLIBC_2.4
00000000       F *UND*	00000000              strcpy@@GLIBC_2.0
0804a018 g       .data	00000000              __data_start
00000000  w      *UND*	00000000              __gmon_start__
0804a01c g     O .data	00000000              .hidden __dso_handle
0804857c g     O .rodata	00000004              _IO_stdin_used
00000000       F *UND*	00000000              __libc_start_main@@GLIBC_2.0
08048500 g     F .text	0000005d              __libc_csu_init
0804a038 g       .bss	00000000              _end
08048370 g     F .text	00000000              _start
08048578 g     O .rodata	00000004              _fp_hw
0804a034 g       .bss	00000000              __bss_start
08048485 g     F .text	00000079              main
00000000  w      *UND*	00000000              _Jv_RegisterClasses
0804a034 g     O .data	00000000              .hidden __TMC_END__
0804a020 g     O .data	00000014              str1
00000000  w      *UND*	00000000              _ITM_registerTMCloneTable
080482f0 g     F .init	00000000              _init


DYNAMIC SYMBOL TABLE:
00000000      DF *UND*	00000000  GLIBC_2.4   __stack_chk_fail
00000000      DF *UND*	00000000  GLIBC_2.0   strcpy
00000000  w   D  *UND*	00000000              __gmon_start__
00000000      DF *UND*	00000000  GLIBC_2.0   __libc_start_main
0804857c g    DO .rodata	00000004  Base        _IO_stdin_used



Disassembly of section .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Disassembly of section .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 20                	add    %ah,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Disassembly of section .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 94 c0 52 46 a9 68 	add    %dl,0x68a94652(%eax,%eax,8)
 804819e:	04 d1                	add    $0xd1,%al
 80481a0:	40                   	inc    %eax
 80481a1:	25 77 25 6b 20       	and    $0x206b2577,%eax
 80481a6:	35 33 64 a1 0e       	xor    $0xea16433,%eax
 80481ab:	41                   	inc    %ecx

Disassembly of section .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	05 00 00 00 01       	add    $0x1000000,%eax
 80481b5:	00 00                	add    %al,(%eax)
 80481b7:	00 05 00 00 00 00    	add    %al,0x0
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 05 00 00 00 ad    	add    %al,0xad000000
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x164>

Disassembly of section .dynsym:

080481cc <.dynsym>:
	...
 80481dc:	21 00                	and    %eax,(%eax)
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	12 00                	adc    (%eax),%al
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	1a 00                	sbb    (%eax),%al
	...
 80481f6:	00 00                	add    %al,(%eax)
 80481f8:	12 00                	adc    (%eax),%al
 80481fa:	00 00                	add    %al,(%eax)
 80481fc:	44                   	inc    %esp
	...
 8048205:	00 00                	add    %al,(%eax)
 8048207:	00 20                	add    %ah,(%eax)
 8048209:	00 00                	add    %al,(%eax)
 804820b:	00 32                	add    %dh,(%edx)
	...
 8048215:	00 00                	add    %al,(%eax)
 8048217:	00 12                	add    %dl,(%edx)
 8048219:	00 00                	add    %al,(%eax)
 804821b:	00 0b                	add    %cl,(%ebx)
 804821d:	00 00                	add    %al,(%eax)
 804821f:	00 7c 85 04          	add    %bh,0x4(%ebp,%eax,4)
 8048223:	08 04 00             	or     %al,(%eax,%eax,1)
 8048226:	00 00                	add    %al,(%eax)
 8048228:	11 00                	adc    %eax,(%eax)
 804822a:	10 00                	adc    %al,(%eax)

Disassembly of section .dynstr:

0804822c <.dynstr>:
 804822c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048230:	63 2e                	arpl   %bp,(%esi)
 8048232:	73 6f                	jae    80482a3 <_init-0x4d>
 8048234:	2e 36 00 5f 49       	cs add %bl,%ss:0x49(%edi)
 8048239:	4f                   	dec    %edi
 804823a:	5f                   	pop    %edi
 804823b:	73 74                	jae    80482b1 <_init-0x3f>
 804823d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048244:	64 
 8048245:	00 73 74             	add    %dh,0x74(%ebx)
 8048248:	72 63                	jb     80482ad <_init-0x43>
 804824a:	70 79                	jo     80482c5 <_init-0x2b>
 804824c:	00 5f 5f             	add    %bl,0x5f(%edi)
 804824f:	73 74                	jae    80482c5 <_init-0x2b>
 8048251:	61                   	popa   
 8048252:	63 6b 5f             	arpl   %bp,0x5f(%ebx)
 8048255:	63 68 6b             	arpl   %bp,0x6b(%eax)
 8048258:	5f                   	pop    %edi
 8048259:	66 61                	popaw  
 804825b:	69 6c 00 5f 5f 6c 69 	imul   $0x62696c5f,0x5f(%eax,%eax,1),%ebp
 8048262:	62 
 8048263:	63 5f 73             	arpl   %bx,0x73(%edi)
 8048266:	74 61                	je     80482c9 <_init-0x27>
 8048268:	72 74                	jb     80482de <_init-0x12>
 804826a:	5f                   	pop    %edi
 804826b:	6d                   	insl   (%dx),%es:(%edi)
 804826c:	61                   	popa   
 804826d:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 8048274:	6f                   	outsl  %ds:(%esi),(%dx)
 8048275:	6e                   	outsb  %ds:(%esi),(%dx)
 8048276:	5f                   	pop    %edi
 8048277:	73 74                	jae    80482ed <_init-0x3>
 8048279:	61                   	popa   
 804827a:	72 74                	jb     80482f0 <_init>
 804827c:	5f                   	pop    %edi
 804827d:	5f                   	pop    %edi
 804827e:	00 47 4c             	add    %al,0x4c(%edi)
 8048281:	49                   	dec    %ecx
 8048282:	42                   	inc    %edx
 8048283:	43                   	inc    %ebx
 8048284:	5f                   	pop    %edi
 8048285:	32 2e                	xor    (%esi),%ch
 8048287:	30 00                	xor    %al,(%eax)
 8048289:	47                   	inc    %edi
 804828a:	4c                   	dec    %esp
 804828b:	49                   	dec    %ecx
 804828c:	42                   	inc    %edx
 804828d:	43                   	inc    %ebx
 804828e:	5f                   	pop    %edi
 804828f:	32 2e                	xor    (%esi),%ch
 8048291:	34 00                	xor    $0x0,%al

Disassembly of section .gnu.version:

08048294 <.gnu.version>:
 8048294:	00 00                	add    %al,(%eax)
 8048296:	02 00                	add    (%eax),%al
 8048298:	03 00                	add    (%eax),%eax
 804829a:	00 00                	add    %al,(%eax)
 804829c:	03 00                	add    (%eax),%eax
 804829e:	01 00                	add    %eax,(%eax)

Disassembly of section .gnu.version_r:

080482a0 <.gnu.version_r>:
 80482a0:	01 00                	add    %eax,(%eax)
 80482a2:	02 00                	add    (%eax),%al
 80482a4:	01 00                	add    %eax,(%eax)
 80482a6:	00 00                	add    %al,(%eax)
 80482a8:	10 00                	adc    %al,(%eax)
 80482aa:	00 00                	add    %al,(%eax)
 80482ac:	00 00                	add    %al,(%eax)
 80482ae:	00 00                	add    %al,(%eax)
 80482b0:	10 69 69             	adc    %ch,0x69(%ecx)
 80482b3:	0d 00 00 03 00       	or     $0x30000,%eax
 80482b8:	53                   	push   %ebx
 80482b9:	00 00                	add    %al,(%eax)
 80482bb:	00 10                	add    %dl,(%eax)
 80482bd:	00 00                	add    %al,(%eax)
 80482bf:	00 14 69             	add    %dl,(%ecx,%ebp,2)
 80482c2:	69 0d 00 00 02 00 5d 	imul   $0x5d,0x20000,%ecx
 80482c9:	00 00 00 
 80482cc:	00 00                	add    %al,(%eax)
	...

Disassembly of section .rel.dyn:

080482d0 <.rel.dyn>:
 80482d0:	fc                   	cld    
 80482d1:	9f                   	lahf   
 80482d2:	04 08                	add    $0x8,%al
 80482d4:	06                   	push   %es
 80482d5:	03 00                	add    (%eax),%eax
	...

Disassembly of section .rel.plt:

080482d8 <.rel.plt>:
 80482d8:	0c a0                	or     $0xa0,%al
 80482da:	04 08                	add    $0x8,%al
 80482dc:	07                   	pop    %es
 80482dd:	01 00                	add    %eax,(%eax)
 80482df:	00 10                	add    %dl,(%eax)
 80482e1:	a0 04 08 07 02       	mov    0x2070804,%al
 80482e6:	00 00                	add    %al,(%eax)
 80482e8:	14 a0                	adc    $0xa0,%al
 80482ea:	04 08                	add    $0x8,%al
 80482ec:	07                   	pop    %es
 80482ed:	04 00                	add    $0x0,%al
	...

Disassembly of section .init:

080482f0 <_init>:
 80482f0:	53                   	push   %ebx
 80482f1:	83 ec 08             	sub    $0x8,%esp
 80482f4:	e8 a7 00 00 00       	call   80483a0 <__x86.get_pc_thunk.bx>
 80482f9:	81 c3 07 1d 00 00    	add    $0x1d07,%ebx
 80482ff:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048305:	85 c0                	test   %eax,%eax
 8048307:	74 05                	je     804830e <_init+0x1e>
 8048309:	e8 52 00 00 00       	call   8048360 <__libc_start_main@plt+0x10>
 804830e:	83 c4 08             	add    $0x8,%esp
 8048311:	5b                   	pop    %ebx
 8048312:	c3                   	ret    

Disassembly of section .plt:

08048320 <__stack_chk_fail@plt-0x10>:
 8048320:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048326:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804832c:	00 00                	add    %al,(%eax)
	...

08048330 <__stack_chk_fail@plt>:
 8048330:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048336:	68 00 00 00 00       	push   $0x0
 804833b:	e9 e0 ff ff ff       	jmp    8048320 <_init+0x30>

08048340 <strcpy@plt>:
 8048340:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048346:	68 08 00 00 00       	push   $0x8
 804834b:	e9 d0 ff ff ff       	jmp    8048320 <_init+0x30>

08048350 <__libc_start_main@plt>:
 8048350:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048356:	68 10 00 00 00       	push   $0x10
 804835b:	e9 c0 ff ff ff       	jmp    8048320 <_init+0x30>

Disassembly of section .plt.got:

08048360 <.plt.got>:
 8048360:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 8048366:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

08048370 <_start>:
 8048370:	31 ed                	xor    %ebp,%ebp
 8048372:	5e                   	pop    %esi
 8048373:	89 e1                	mov    %esp,%ecx
 8048375:	83 e4 f0             	and    $0xfffffff0,%esp
 8048378:	50                   	push   %eax
 8048379:	54                   	push   %esp
 804837a:	52                   	push   %edx
 804837b:	68 60 85 04 08       	push   $0x8048560
 8048380:	68 00 85 04 08       	push   $0x8048500
 8048385:	51                   	push   %ecx
 8048386:	56                   	push   %esi
 8048387:	68 85 84 04 08       	push   $0x8048485
 804838c:	e8 bf ff ff ff       	call   8048350 <__libc_start_main@plt>
 8048391:	f4                   	hlt    
 8048392:	66 90                	xchg   %ax,%ax
 8048394:	66 90                	xchg   %ax,%ax
 8048396:	66 90                	xchg   %ax,%ax
 8048398:	66 90                	xchg   %ax,%ax
 804839a:	66 90                	xchg   %ax,%ax
 804839c:	66 90                	xchg   %ax,%ax
 804839e:	66 90                	xchg   %ax,%ax

080483a0 <__x86.get_pc_thunk.bx>:
 80483a0:	8b 1c 24             	mov    (%esp),%ebx
 80483a3:	c3                   	ret    
 80483a4:	66 90                	xchg   %ax,%ax
 80483a6:	66 90                	xchg   %ax,%ax
 80483a8:	66 90                	xchg   %ax,%ax
 80483aa:	66 90                	xchg   %ax,%ax
 80483ac:	66 90                	xchg   %ax,%ax
 80483ae:	66 90                	xchg   %ax,%ax

080483b0 <deregister_tm_clones>:
 80483b0:	b8 37 a0 04 08       	mov    $0x804a037,%eax
 80483b5:	2d 34 a0 04 08       	sub    $0x804a034,%eax
 80483ba:	83 f8 06             	cmp    $0x6,%eax
 80483bd:	76 1a                	jbe    80483d9 <deregister_tm_clones+0x29>
 80483bf:	b8 00 00 00 00       	mov    $0x0,%eax
 80483c4:	85 c0                	test   %eax,%eax
 80483c6:	74 11                	je     80483d9 <deregister_tm_clones+0x29>
 80483c8:	55                   	push   %ebp
 80483c9:	89 e5                	mov    %esp,%ebp
 80483cb:	83 ec 14             	sub    $0x14,%esp
 80483ce:	68 34 a0 04 08       	push   $0x804a034
 80483d3:	ff d0                	call   *%eax
 80483d5:	83 c4 10             	add    $0x10,%esp
 80483d8:	c9                   	leave  
 80483d9:	f3 c3                	repz ret 
 80483db:	90                   	nop
 80483dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

080483e0 <register_tm_clones>:
 80483e0:	b8 34 a0 04 08       	mov    $0x804a034,%eax
 80483e5:	2d 34 a0 04 08       	sub    $0x804a034,%eax
 80483ea:	c1 f8 02             	sar    $0x2,%eax
 80483ed:	89 c2                	mov    %eax,%edx
 80483ef:	c1 ea 1f             	shr    $0x1f,%edx
 80483f2:	01 d0                	add    %edx,%eax
 80483f4:	d1 f8                	sar    %eax
 80483f6:	74 1b                	je     8048413 <register_tm_clones+0x33>
 80483f8:	ba 00 00 00 00       	mov    $0x0,%edx
 80483fd:	85 d2                	test   %edx,%edx
 80483ff:	74 12                	je     8048413 <register_tm_clones+0x33>
 8048401:	55                   	push   %ebp
 8048402:	89 e5                	mov    %esp,%ebp
 8048404:	83 ec 10             	sub    $0x10,%esp
 8048407:	50                   	push   %eax
 8048408:	68 34 a0 04 08       	push   $0x804a034
 804840d:	ff d2                	call   *%edx
 804840f:	83 c4 10             	add    $0x10,%esp
 8048412:	c9                   	leave  
 8048413:	f3 c3                	repz ret 
 8048415:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048420 <__do_global_dtors_aux>:
 8048420:	80 3d 34 a0 04 08 00 	cmpb   $0x0,0x804a034
 8048427:	75 13                	jne    804843c <__do_global_dtors_aux+0x1c>
 8048429:	55                   	push   %ebp
 804842a:	89 e5                	mov    %esp,%ebp
 804842c:	83 ec 08             	sub    $0x8,%esp
 804842f:	e8 7c ff ff ff       	call   80483b0 <deregister_tm_clones>
 8048434:	c6 05 34 a0 04 08 01 	movb   $0x1,0x804a034
 804843b:	c9                   	leave  
 804843c:	f3 c3                	repz ret 
 804843e:	66 90                	xchg   %ax,%ax

08048440 <frame_dummy>:
 8048440:	b8 10 9f 04 08       	mov    $0x8049f10,%eax
 8048445:	8b 10                	mov    (%eax),%edx
 8048447:	85 d2                	test   %edx,%edx
 8048449:	75 05                	jne    8048450 <frame_dummy+0x10>
 804844b:	eb 93                	jmp    80483e0 <register_tm_clones>
 804844d:	8d 76 00             	lea    0x0(%esi),%esi
 8048450:	ba 00 00 00 00       	mov    $0x0,%edx
 8048455:	85 d2                	test   %edx,%edx
 8048457:	74 f2                	je     804844b <frame_dummy+0xb>
 8048459:	55                   	push   %ebp
 804845a:	89 e5                	mov    %esp,%ebp
 804845c:	83 ec 14             	sub    $0x14,%esp
 804845f:	50                   	push   %eax
 8048460:	ff d2                	call   *%edx
 8048462:	83 c4 10             	add    $0x10,%esp
 8048465:	c9                   	leave  
 8048466:	e9 75 ff ff ff       	jmp    80483e0 <register_tm_clones>

0804846b <callcopy>:
 804846b:	55                   	push   %ebp
 804846c:	89 e5                	mov    %esp,%ebp
 804846e:	83 ec 08             	sub    $0x8,%esp
 8048471:	83 ec 08             	sub    $0x8,%esp
 8048474:	ff 75 0c             	pushl  0xc(%ebp)
 8048477:	ff 75 08             	pushl  0x8(%ebp)
 804847a:	e8 c1 fe ff ff       	call   8048340 <strcpy@plt>
 804847f:	83 c4 10             	add    $0x10,%esp
 8048482:	90                   	nop
 8048483:	c9                   	leave  
 8048484:	c3                   	ret    

08048485 <main>:
 8048485:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048489:	83 e4 f0             	and    $0xfffffff0,%esp
 804848c:	ff 71 fc             	pushl  -0x4(%ecx)
 804848f:	55                   	push   %ebp
 8048490:	89 e5                	mov    %esp,%ebp
 8048492:	51                   	push   %ecx
 8048493:	83 ec 34             	sub    $0x34,%esp
 8048496:	89 c8                	mov    %ecx,%eax
 8048498:	8b 40 04             	mov    0x4(%eax),%eax
 804849b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 804849e:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80484a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80484a7:	31 c0                	xor    %eax,%eax
 80484a9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
 80484b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 80484b7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
 80484be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 80484c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 80484cc:	83 ec 08             	sub    $0x8,%esp
 80484cf:	68 20 a0 04 08       	push   $0x804a020
 80484d4:	8d 45 e0             	lea    -0x20(%ebp),%eax
 80484d7:	50                   	push   %eax
 80484d8:	e8 8e ff ff ff       	call   804846b <callcopy>
 80484dd:	83 c4 10             	add    $0x10,%esp
 80484e0:	b8 00 00 00 00       	mov    $0x0,%eax
 80484e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
 80484e8:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 80484ef:	74 05                	je     80484f6 <main+0x71>
 80484f1:	e8 3a fe ff ff       	call   8048330 <__stack_chk_fail@plt>
 80484f6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 80484f9:	c9                   	leave  
 80484fa:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80484fd:	c3                   	ret    
 80484fe:	66 90                	xchg   %ax,%ax

08048500 <__libc_csu_init>:
 8048500:	55                   	push   %ebp
 8048501:	57                   	push   %edi
 8048502:	56                   	push   %esi
 8048503:	53                   	push   %ebx
 8048504:	e8 97 fe ff ff       	call   80483a0 <__x86.get_pc_thunk.bx>
 8048509:	81 c3 f7 1a 00 00    	add    $0x1af7,%ebx
 804850f:	83 ec 0c             	sub    $0xc,%esp
 8048512:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8048516:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804851c:	e8 cf fd ff ff       	call   80482f0 <_init>
 8048521:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048527:	29 c6                	sub    %eax,%esi
 8048529:	c1 fe 02             	sar    $0x2,%esi
 804852c:	85 f6                	test   %esi,%esi
 804852e:	74 25                	je     8048555 <__libc_csu_init+0x55>
 8048530:	31 ff                	xor    %edi,%edi
 8048532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048538:	83 ec 04             	sub    $0x4,%esp
 804853b:	ff 74 24 2c          	pushl  0x2c(%esp)
 804853f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048543:	55                   	push   %ebp
 8048544:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 804854b:	83 c7 01             	add    $0x1,%edi
 804854e:	83 c4 10             	add    $0x10,%esp
 8048551:	39 f7                	cmp    %esi,%edi
 8048553:	75 e3                	jne    8048538 <__libc_csu_init+0x38>
 8048555:	83 c4 0c             	add    $0xc,%esp
 8048558:	5b                   	pop    %ebx
 8048559:	5e                   	pop    %esi
 804855a:	5f                   	pop    %edi
 804855b:	5d                   	pop    %ebp
 804855c:	c3                   	ret    
 804855d:	8d 76 00             	lea    0x0(%esi),%esi

08048560 <__libc_csu_fini>:
 8048560:	f3 c3                	repz ret 

Disassembly of section .fini:

08048564 <_fini>:
 8048564:	53                   	push   %ebx
 8048565:	83 ec 08             	sub    $0x8,%esp
 8048568:	e8 33 fe ff ff       	call   80483a0 <__x86.get_pc_thunk.bx>
 804856d:	81 c3 93 1a 00 00    	add    $0x1a93,%ebx
 8048573:	83 c4 08             	add    $0x8,%esp
 8048576:	5b                   	pop    %ebx
 8048577:	c3                   	ret    

Disassembly of section .rodata:

08048578 <_fp_hw>:
 8048578:	03 00                	add    (%eax),%eax
	...

0804857c <_IO_stdin_used>:
 804857c:	01 00                	add    %eax,(%eax)
 804857e:	02 00                	add    (%eax),%al

Disassembly of section .eh_frame_hdr:

08048580 <__GNU_EH_FRAME_HDR>:
 8048580:	01 1b                	add    %ebx,(%ebx)
 8048582:	03 3b                	add    (%ebx),%edi
 8048584:	30 00                	xor    %al,(%eax)
 8048586:	00 00                	add    %al,(%eax)
 8048588:	05 00 00 00 a0       	add    $0xa0000000,%eax
 804858d:	fd                   	std    
 804858e:	ff                   	(bad)  
 804858f:	ff 4c 00 00          	decl   0x0(%eax,%eax,1)
 8048593:	00 eb                	add    %ch,%bl
 8048595:	fe                   	(bad)  
 8048596:	ff                   	(bad)  
 8048597:	ff 70 00             	pushl  0x0(%eax)
 804859a:	00 00                	add    %al,(%eax)
 804859c:	05 ff ff ff 90       	add    $0x90ffffff,%eax
 80485a1:	00 00                	add    %al,(%eax)
 80485a3:	00 80 ff ff ff bc    	add    %al,-0x43000001(%eax)
 80485a9:	00 00                	add    %al,(%eax)
 80485ab:	00 e0                	add    %ah,%al
 80485ad:	ff                   	(bad)  
 80485ae:	ff                   	(bad)  
 80485af:	ff 08                	decl   (%eax)
 80485b1:	01 00                	add    %eax,(%eax)
	...

Disassembly of section .eh_frame:

080485b4 <__FRAME_END__-0xe8>:
 80485b4:	14 00                	adc    $0x0,%al
 80485b6:	00 00                	add    %al,(%eax)
 80485b8:	00 00                	add    %al,(%eax)
 80485ba:	00 00                	add    %al,(%eax)
 80485bc:	01 7a 52             	add    %edi,0x52(%edx)
 80485bf:	00 01                	add    %al,(%ecx)
 80485c1:	7c 08                	jl     80485cb <__GNU_EH_FRAME_HDR+0x4b>
 80485c3:	01 1b                	add    %ebx,(%ebx)
 80485c5:	0c 04                	or     $0x4,%al
 80485c7:	04 88                	add    $0x88,%al
 80485c9:	01 00                	add    %eax,(%eax)
 80485cb:	00 20                	add    %ah,(%eax)
 80485cd:	00 00                	add    %al,(%eax)
 80485cf:	00 1c 00             	add    %bl,(%eax,%eax,1)
 80485d2:	00 00                	add    %al,(%eax)
 80485d4:	4c                   	dec    %esp
 80485d5:	fd                   	std    
 80485d6:	ff                   	(bad)  
 80485d7:	ff 40 00             	incl   0x0(%eax)
 80485da:	00 00                	add    %al,(%eax)
 80485dc:	00 0e                	add    %cl,(%esi)
 80485de:	08 46 0e             	or     %al,0xe(%esi)
 80485e1:	0c 4a                	or     $0x4a,%al
 80485e3:	0f 0b                	ud2    
 80485e5:	74 04                	je     80485eb <__GNU_EH_FRAME_HDR+0x6b>
 80485e7:	78 00                	js     80485e9 <__GNU_EH_FRAME_HDR+0x69>
 80485e9:	3f                   	aas    
 80485ea:	1a 3b                	sbb    (%ebx),%bh
 80485ec:	2a 32                	sub    (%edx),%dh
 80485ee:	24 22                	and    $0x22,%al
 80485f0:	1c 00                	sbb    $0x0,%al
 80485f2:	00 00                	add    %al,(%eax)
 80485f4:	40                   	inc    %eax
 80485f5:	00 00                	add    %al,(%eax)
 80485f7:	00 73 fe             	add    %dh,-0x2(%ebx)
 80485fa:	ff                   	(bad)  
 80485fb:	ff 1a                	lcall  *(%edx)
 80485fd:	00 00                	add    %al,(%eax)
 80485ff:	00 00                	add    %al,(%eax)
 8048601:	41                   	inc    %ecx
 8048602:	0e                   	push   %cs
 8048603:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 8048609:	56                   	push   %esi
 804860a:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
 804860d:	04 00                	add    $0x0,%al
 804860f:	00 28                	add    %ch,(%eax)
 8048611:	00 00                	add    %al,(%eax)
 8048613:	00 60 00             	add    %ah,0x0(%eax)
 8048616:	00 00                	add    %al,(%eax)
 8048618:	6d                   	insl   (%dx),%es:(%edi)
 8048619:	fe                   	(bad)  
 804861a:	ff                   	(bad)  
 804861b:	ff                   	(bad)  
 804861c:	79 00                	jns    804861e <__GNU_EH_FRAME_HDR+0x9e>
 804861e:	00 00                	add    %al,(%eax)
 8048620:	00 44 0c 01          	add    %al,0x1(%esp,%ecx,1)
 8048624:	00 47 10             	add    %al,0x10(%edi)
 8048627:	05 02 75 00 43       	add    $0x43007502,%eax
 804862c:	0f 03 75 7c          	lsl    0x7c(%ebp),%esi
 8048630:	06                   	push   %es
 8048631:	02 66 0c             	add    0xc(%esi),%ah
 8048634:	01 00                	add    %eax,(%eax)
 8048636:	41                   	inc    %ecx
 8048637:	c5 43 0c             	lds    0xc(%ebx),%eax
 804863a:	04 04                	add    $0x4,%al
 804863c:	48                   	dec    %eax
 804863d:	00 00                	add    %al,(%eax)
 804863f:	00 8c 00 00 00 bc fe 	add    %cl,-0x1440000(%eax,%eax,1)
 8048646:	ff                   	(bad)  
 8048647:	ff 5d 00             	lcall  *0x0(%ebp)
 804864a:	00 00                	add    %al,(%eax)
 804864c:	00 41 0e             	add    %al,0xe(%ecx)
 804864f:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 8048655:	87 03                	xchg   %eax,(%ebx)
 8048657:	41                   	inc    %ecx
 8048658:	0e                   	push   %cs
 8048659:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 804865f:	83 05 4e 0e 20 69 0e 	addl   $0xe,0x69200e4e
 8048666:	24 44                	and    $0x44,%al
 8048668:	0e                   	push   %cs
 8048669:	28 44 0e 2c          	sub    %al,0x2c(%esi,%ecx,1)
 804866d:	41                   	inc    %ecx
 804866e:	0e                   	push   %cs
 804866f:	30 4d 0e             	xor    %cl,0xe(%ebp)
 8048672:	20 47 0e             	and    %al,0xe(%edi)
 8048675:	14 41                	adc    $0x41,%al
 8048677:	c3                   	ret    
 8048678:	0e                   	push   %cs
 8048679:	10 41 c6             	adc    %al,-0x3a(%ecx)
 804867c:	0e                   	push   %cs
 804867d:	0c 41                	or     $0x41,%al
 804867f:	c7                   	(bad)  
 8048680:	0e                   	push   %cs
 8048681:	08 41 c5             	or     %al,-0x3b(%ecx)
 8048684:	0e                   	push   %cs
 8048685:	04 00                	add    $0x0,%al
 8048687:	00 10                	add    %dl,(%eax)
 8048689:	00 00                	add    %al,(%eax)
 804868b:	00 d8                	add    %bl,%al
 804868d:	00 00                	add    %al,(%eax)
 804868f:	00 d0                	add    %dl,%al
 8048691:	fe                   	(bad)  
 8048692:	ff                   	(bad)  
 8048693:	ff 02                	incl   (%edx)
 8048695:	00 00                	add    %al,(%eax)
 8048697:	00 00                	add    %al,(%eax)
 8048699:	00 00                	add    %al,(%eax)
	...

0804869c <__FRAME_END__>:
 804869c:	00 00                	add    %al,(%eax)
	...

Disassembly of section .init_array:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	40                   	inc    %eax
 8049f09:	84 04 08             	test   %al,(%eax,%ecx,1)

Disassembly of section .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	20                   	.byte 0x20
 8049f0d:	84 04 08             	test   %al,(%eax,%ecx,1)

Disassembly of section .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Disassembly of section .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	f0 82                	lock (bad) 
 8049f22:	04 08                	add    $0x8,%al
 8049f24:	0d 00 00 00 64       	or     $0x64000000,%eax
 8049f29:	85 04 08             	test   %eax,(%eax,%ecx,1)
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	2c 82                	sub    $0x82,%al
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	67 00 00             	add    %al,(%bx,%si)
 8049f6b:	00 0b                	add    %cl,(%ebx)
 8049f6d:	00 00                	add    %al,(%eax)
 8049f6f:	00 10                	add    %dl,(%eax)
 8049f71:	00 00                	add    %al,(%eax)
 8049f73:	00 15 00 00 00 00    	add    %dl,0x0
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	18 00                	sbb    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 d8                	add    %bl,%al
 8049f99:	82                   	(bad)  
 8049f9a:	04 08                	add    $0x8,%al
 8049f9c:	11 00                	adc    %eax,(%eax)
 8049f9e:	00 00                	add    %al,(%eax)
 8049fa0:	d0 82 04 08 12 00    	rolb   0x120804(%edx)
 8049fa6:	00 00                	add    %al,(%eax)
 8049fa8:	08 00                	or     %al,(%eax)
 8049faa:	00 00                	add    %al,(%eax)
 8049fac:	13 00                	adc    (%eax),%eax
 8049fae:	00 00                	add    %al,(%eax)
 8049fb0:	08 00                	or     %al,(%eax)
 8049fb2:	00 00                	add    %al,(%eax)
 8049fb4:	fe                   	(bad)  
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f a0             	ljmp   *-0x60(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f 94             	ljmp   *-0x6c(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Disassembly of section .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
			8049ffc: R_386_GLOB_DAT	__gmon_start__
	...

Disassembly of section .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	36 83 04 08 46       	addl   $0x46,%ss:(%eax,%ecx,1)
			804a00c: R_386_JUMP_SLOT	__stack_chk_fail@GLIBC_2.4
			804a010: R_386_JUMP_SLOT	strcpy@GLIBC_2.0
 804a011:	83 04 08 56          	addl   $0x56,(%eax,%ecx,1)
			804a014: R_386_JUMP_SLOT	__libc_start_main@GLIBC_2.0
 804a015:	83                   	.byte 0x83
 804a016:	04 08                	add    $0x8,%al

Disassembly of section .data:

0804a018 <__data_start>:
 804a018:	00 00                	add    %al,(%eax)
	...

0804a01c <__dso_handle>:
 804a01c:	00 00                	add    %al,(%eax)
	...

0804a020 <str1>:
 804a020:	68 65 6c 6c 6f       	push   $0x6f6c6c65
 804a025:	77 6f                	ja     804a096 <_end+0x5e>
 804a027:	72 6c                	jb     804a095 <_end+0x5d>
 804a029:	64 21 00             	and    %eax,%fs:(%eax)
	...

Disassembly of section .bss:

0804a034 <__bss_start>:
 804a034:	00 00                	add    %al,(%eax)
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x8048278>
   a:	74 75                	je     81 <_init-0x804826f>
   c:	20 35 2e 33 2e 31    	and    %dh,0x312e332e
  12:	2d 31 34 75 62       	sub    $0x62753431,%eax
  17:	75 6e                	jne    87 <_init-0x8048269>
  19:	74 75                	je     90 <_init-0x8048260>
  1b:	32 29                	xor    (%ecx),%ch
  1d:	20 35 2e 33 2e 31    	and    %dh,0x312e332e
  23:	20 32                	and    %dh,(%edx)
  25:	30 31                	xor    %dh,(%ecx)
  27:	36 30 34 31          	xor    %dh,%ss:(%ecx,%esi,1)
  2b:	33 00                	xor    (%eax),%eax
