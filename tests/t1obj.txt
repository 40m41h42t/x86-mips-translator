
./t1：     文件格式 elf32-i386
./t1
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x080483d0

程序头：
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x00000120 memsz 0x00000120 flags r-x
  INTERP off    0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x00000784 memsz 0x00000784 flags r-x
    LOAD off    0x00000f08 vaddr 0x08049f08 paddr 0x08049f08 align 2**12
         filesz 0x00000120 memsz 0x00000124 flags rw-
 DYNAMIC off    0x00000f14 vaddr 0x08049f14 paddr 0x08049f14 align 2**2
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
    NOTE off    0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2
         filesz 0x00000044 memsz 0x00000044 flags r--
EH_FRAME off    0x00000664 vaddr 0x08048664 paddr 0x08048664 align 2**2
         filesz 0x00000034 memsz 0x00000034 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-
   RELRO off    0x00000f08 vaddr 0x08049f08 paddr 0x08049f08 align 2**0
         filesz 0x000000f8 memsz 0x000000f8 flags r--

动态节：
  NEEDED               libc.so.6
  INIT                 0x08048330
  FINI                 0x08048634
  INIT_ARRAY           0x08049f08
  INIT_ARRAYSZ         0x00000004
  FINI_ARRAY           0x08049f0c
  FINI_ARRAYSZ         0x00000004
  GNU_HASH             0x080481ac
  STRTAB               0x0804824c
  SYMTAB               0x080481cc
  STRSZ                0x00000073
  SYMENT               0x00000010
  DEBUG                0x00000000
  PLTGOT               0x0804a000
  PLTRELSZ             0x00000028
  PLTREL               0x00000011
  JMPREL               0x08048308
  REL                  0x08048300
  RELSZ                0x00000008
  RELENT               0x00000008
  VERNEED              0x080482d0
  VERNEEDNUM           0x00000001
  VERSYM               0x080482c0

版本引用：
  required from libc.so.6:
    0x0d696914 0x00 03 GLIBC_2.4
    0x0d696910 0x00 02 GLIBC_2.0

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000013  08048154  08048154  00000154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  08048168  08048168  00000168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  08048188  08048188  00000188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     00000020  080481ac  080481ac  000001ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000080  080481cc  080481cc  000001cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000073  0804824c  0804824c  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000010  080482c0  080482c0  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000030  080482d0  080482d0  000002d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  08048300  08048300  00000300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000028  08048308  08048308  00000308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000023  08048330  08048330  00000330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000060  08048360  08048360  00000360  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000008  080483c0  080483c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000262  080483d0  080483d0  000003d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000014  08048634  08048634  00000634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000019  08048648  08048648  00000648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 00000034  08048664  08048664  00000664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000ec  08048698  08048698  00000698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000004  08049f08  08049f08  00000f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000004  08049f0c  08049f0c  00000f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .jcr          00000004  08049f10  08049f10  00000f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .dynamic      000000e8  08049f14  08049f14  00000f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got          00000004  08049ffc  08049ffc  00000ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got.plt      00000020  0804a000  0804a000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000008  0804a020  0804a020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000004  0804a028  0804a028  00001028  2**0
                  ALLOC
 26 .comment      0000002d  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08048154 l    d  .interp	00000000              .interp
08048168 l    d  .note.ABI-tag	00000000              .note.ABI-tag
08048188 l    d  .note.gnu.build-id	00000000              .note.gnu.build-id
080481ac l    d  .gnu.hash	00000000              .gnu.hash
080481cc l    d  .dynsym	00000000              .dynsym
0804824c l    d  .dynstr	00000000              .dynstr
080482c0 l    d  .gnu.version	00000000              .gnu.version
080482d0 l    d  .gnu.version_r	00000000              .gnu.version_r
08048300 l    d  .rel.dyn	00000000              .rel.dyn
08048308 l    d  .rel.plt	00000000              .rel.plt
08048330 l    d  .init	00000000              .init
08048360 l    d  .plt	00000000              .plt
080483c0 l    d  .plt.got	00000000              .plt.got
080483d0 l    d  .text	00000000              .text
08048634 l    d  .fini	00000000              .fini
08048648 l    d  .rodata	00000000              .rodata
08048664 l    d  .eh_frame_hdr	00000000              .eh_frame_hdr
08048698 l    d  .eh_frame	00000000              .eh_frame
08049f08 l    d  .init_array	00000000              .init_array
08049f0c l    d  .fini_array	00000000              .fini_array
08049f10 l    d  .jcr	00000000              .jcr
08049f14 l    d  .dynamic	00000000              .dynamic
08049ffc l    d  .got	00000000              .got
0804a000 l    d  .got.plt	00000000              .got.plt
0804a020 l    d  .data	00000000              .data
0804a028 l    d  .bss	00000000              .bss
00000000 l    d  .comment	00000000              .comment
00000000 l    df *ABS*	00000000              crtstuff.c
08049f10 l     O .jcr	00000000              __JCR_LIST__
08048410 l     F .text	00000000              deregister_tm_clones
08048440 l     F .text	00000000              register_tm_clones
08048480 l     F .text	00000000              __do_global_dtors_aux
0804a028 l     O .bss	00000001              completed.7200
08049f0c l     O .fini_array	00000000              __do_global_dtors_aux_fini_array_entry
080484a0 l     F .text	00000000              frame_dummy
08049f08 l     O .init_array	00000000              __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000              t1.c
00000000 l    df *ABS*	00000000              crtstuff.c
08048780 l     O .eh_frame	00000000              __FRAME_END__
08049f10 l     O .jcr	00000000              __JCR_END__
00000000 l    df *ABS*	00000000              
08049f0c l       .init_array	00000000              __init_array_end
08049f14 l     O .dynamic	00000000              _DYNAMIC
08049f08 l       .init_array	00000000              __init_array_start
08048664 l       .eh_frame_hdr	00000000              __GNU_EH_FRAME_HDR
0804a000 l     O .got.plt	00000000              _GLOBAL_OFFSET_TABLE_
08048630 g     F .text	00000002              __libc_csu_fini
00000000  w      *UND*	00000000              _ITM_deregisterTMCloneTable
08048400 g     F .text	00000004              .hidden __x86.get_pc_thunk.bx
0804a020  w      .data	00000000              data_start
00000000       F *UND*	00000000              printf@@GLIBC_2.0
0804a028 g       .data	00000000              _edata
08048634 g     F .fini	00000000              _fini
00000000       F *UND*	00000000              __stack_chk_fail@@GLIBC_2.4
0804a020 g       .data	00000000              __data_start
00000000       F *UND*	00000000              puts@@GLIBC_2.0
00000000  w      *UND*	00000000              __gmon_start__
0804a024 g     O .data	00000000              .hidden __dso_handle
0804864c g     O .rodata	00000004              _IO_stdin_used
00000000       F *UND*	00000000              strlen@@GLIBC_2.0
00000000       F *UND*	00000000              __libc_start_main@@GLIBC_2.0
080485d0 g     F .text	0000005d              __libc_csu_init
0804a02c g       .bss	00000000              _end
080483d0 g     F .text	00000000              _start
08048648 g     O .rodata	00000004              _fp_hw
0804a028 g       .bss	00000000              __bss_start
080484fb g     F .text	000000c9              main
00000000  w      *UND*	00000000              _Jv_RegisterClasses
0804a028 g     O .data	00000000              .hidden __TMC_END__
00000000  w      *UND*	00000000              _ITM_registerTMCloneTable
08048330 g     F .init	00000000              _init
080484cb g     F .text	00000030              transfer


DYNAMIC SYMBOL TABLE:
00000000      DF *UND*	00000000  GLIBC_2.0   printf
00000000      DF *UND*	00000000  GLIBC_2.4   __stack_chk_fail
00000000      DF *UND*	00000000  GLIBC_2.0   puts
00000000  w   D  *UND*	00000000              __gmon_start__
00000000      DF *UND*	00000000  GLIBC_2.0   strlen
00000000      DF *UND*	00000000  GLIBC_2.0   __libc_start_main
0804864c g    DO .rodata	00000004  Base        _IO_stdin_used



Disassembly of section .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Disassembly of section .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 20                	add    %ah,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Disassembly of section .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 bc 9f 8c 2c 08 39 	add    %bh,0x39082c8c(%edi,%ebx,4)
 804819e:	a0 d0 fc 7e 46       	mov    0x467efcd0,%al
 80481a3:	d5 2d                	aad    $0x2d
 80481a5:	5b                   	pop    %ebx
 80481a6:	85 58 c9             	test   %ebx,-0x37(%eax)
 80481a9:	61                   	popa   
 80481aa:	38 e1                	cmp    %ah,%cl

Disassembly of section .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	07                   	pop    %es
 80481b1:	00 00                	add    %al,(%eax)
 80481b3:	00 01                	add    %al,(%ecx)
 80481b5:	00 00                	add    %al,(%eax)
 80481b7:	00 05 00 00 00 00    	add    %al,0x0
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 07                	add    %al,(%edi)
 80481c5:	00 00                	add    %al,(%eax)
 80481c7:	00                   	.byte 0x0
 80481c8:	ad                   	lods   %ds:(%esi),%eax
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x1a4>

Disassembly of section .dynsym:

080481cc <.dynsym>:
	...
 80481dc:	30 00                	xor    %al,(%eax)
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	12 00                	adc    (%eax),%al
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	1f                   	pop    %ds
	...
 80481f5:	00 00                	add    %al,(%eax)
 80481f7:	00 12                	add    %dl,(%edx)
 80481f9:	00 00                	add    %al,(%eax)
 80481fb:	00 1a                	add    %bl,(%edx)
	...
 8048205:	00 00                	add    %al,(%eax)
 8048207:	00 12                	add    %dl,(%edx)
 8048209:	00 00                	add    %al,(%eax)
 804820b:	00 50 00             	add    %dl,0x0(%eax)
	...
 8048216:	00 00                	add    %al,(%eax)
 8048218:	20 00                	and    %al,(%eax)
 804821a:	00 00                	add    %al,(%eax)
 804821c:	37                   	aaa    
	...
 8048225:	00 00                	add    %al,(%eax)
 8048227:	00 12                	add    %dl,(%edx)
 8048229:	00 00                	add    %al,(%eax)
 804822b:	00 3e                	add    %bh,(%esi)
	...
 8048235:	00 00                	add    %al,(%eax)
 8048237:	00 12                	add    %dl,(%edx)
 8048239:	00 00                	add    %al,(%eax)
 804823b:	00 0b                	add    %cl,(%ebx)
 804823d:	00 00                	add    %al,(%eax)
 804823f:	00 4c 86 04          	add    %cl,0x4(%esi,%eax,4)
 8048243:	08 04 00             	or     %al,(%eax,%eax,1)
 8048246:	00 00                	add    %al,(%eax)
 8048248:	11 00                	adc    %eax,(%eax)
 804824a:	10 00                	adc    %al,(%eax)

Disassembly of section .dynstr:

0804824c <.dynstr>:
 804824c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048250:	63 2e                	arpl   %bp,(%esi)
 8048252:	73 6f                	jae    80482c3 <_init-0x6d>
 8048254:	2e 36 00 5f 49       	cs add %bl,%ss:0x49(%edi)
 8048259:	4f                   	dec    %edi
 804825a:	5f                   	pop    %edi
 804825b:	73 74                	jae    80482d1 <_init-0x5f>
 804825d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048264:	64 
 8048265:	00 70 75             	add    %dh,0x75(%eax)
 8048268:	74 73                	je     80482dd <_init-0x53>
 804826a:	00 5f 5f             	add    %bl,0x5f(%edi)
 804826d:	73 74                	jae    80482e3 <_init-0x4d>
 804826f:	61                   	popa   
 8048270:	63 6b 5f             	arpl   %bp,0x5f(%ebx)
 8048273:	63 68 6b             	arpl   %bp,0x6b(%eax)
 8048276:	5f                   	pop    %edi
 8048277:	66 61                	popaw  
 8048279:	69 6c 00 70 72 69 6e 	imul   $0x746e6972,0x70(%eax,%eax,1),%ebp
 8048280:	74 
 8048281:	66 00 73 74          	data16 add %dh,0x74(%ebx)
 8048285:	72 6c                	jb     80482f3 <_init-0x3d>
 8048287:	65 6e                	outsb  %gs:(%esi),(%dx)
 8048289:	00 5f 5f             	add    %bl,0x5f(%edi)
 804828c:	6c                   	insb   (%dx),%es:(%edi)
 804828d:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 8048294:	72 74                	jb     804830a <_init-0x26>
 8048296:	5f                   	pop    %edi
 8048297:	6d                   	insl   (%dx),%es:(%edi)
 8048298:	61                   	popa   
 8048299:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 80482a0:	6f                   	outsl  %ds:(%esi),(%dx)
 80482a1:	6e                   	outsb  %ds:(%esi),(%dx)
 80482a2:	5f                   	pop    %edi
 80482a3:	73 74                	jae    8048319 <_init-0x17>
 80482a5:	61                   	popa   
 80482a6:	72 74                	jb     804831c <_init-0x14>
 80482a8:	5f                   	pop    %edi
 80482a9:	5f                   	pop    %edi
 80482aa:	00 47 4c             	add    %al,0x4c(%edi)
 80482ad:	49                   	dec    %ecx
 80482ae:	42                   	inc    %edx
 80482af:	43                   	inc    %ebx
 80482b0:	5f                   	pop    %edi
 80482b1:	32 2e                	xor    (%esi),%ch
 80482b3:	34 00                	xor    $0x0,%al
 80482b5:	47                   	inc    %edi
 80482b6:	4c                   	dec    %esp
 80482b7:	49                   	dec    %ecx
 80482b8:	42                   	inc    %edx
 80482b9:	43                   	inc    %ebx
 80482ba:	5f                   	pop    %edi
 80482bb:	32 2e                	xor    (%esi),%ch
 80482bd:	30 00                	xor    %al,(%eax)

Disassembly of section .gnu.version:

080482c0 <.gnu.version>:
 80482c0:	00 00                	add    %al,(%eax)
 80482c2:	02 00                	add    (%eax),%al
 80482c4:	03 00                	add    (%eax),%eax
 80482c6:	02 00                	add    (%eax),%al
 80482c8:	00 00                	add    %al,(%eax)
 80482ca:	02 00                	add    (%eax),%al
 80482cc:	02 00                	add    (%eax),%al
 80482ce:	01 00                	add    %eax,(%eax)

Disassembly of section .gnu.version_r:

080482d0 <.gnu.version_r>:
 80482d0:	01 00                	add    %eax,(%eax)
 80482d2:	02 00                	add    (%eax),%al
 80482d4:	01 00                	add    %eax,(%eax)
 80482d6:	00 00                	add    %al,(%eax)
 80482d8:	10 00                	adc    %al,(%eax)
 80482da:	00 00                	add    %al,(%eax)
 80482dc:	00 00                	add    %al,(%eax)
 80482de:	00 00                	add    %al,(%eax)
 80482e0:	14 69                	adc    $0x69,%al
 80482e2:	69 0d 00 00 03 00 5f 	imul   $0x5f,0x30000,%ecx
 80482e9:	00 00 00 
 80482ec:	10 00                	adc    %al,(%eax)
 80482ee:	00 00                	add    %al,(%eax)
 80482f0:	10 69 69             	adc    %ch,0x69(%ecx)
 80482f3:	0d 00 00 02 00       	or     $0x20000,%eax
 80482f8:	69 00 00 00 00 00    	imul   $0x0,(%eax),%eax
	...

Disassembly of section .rel.dyn:

08048300 <.rel.dyn>:
 8048300:	fc                   	cld    
 8048301:	9f                   	lahf   
 8048302:	04 08                	add    $0x8,%al
 8048304:	06                   	push   %es
 8048305:	04 00                	add    $0x0,%al
	...

Disassembly of section .rel.plt:

08048308 <.rel.plt>:
 8048308:	0c a0                	or     $0xa0,%al
 804830a:	04 08                	add    $0x8,%al
 804830c:	07                   	pop    %es
 804830d:	01 00                	add    %eax,(%eax)
 804830f:	00 10                	add    %dl,(%eax)
 8048311:	a0 04 08 07 02       	mov    0x2070804,%al
 8048316:	00 00                	add    %al,(%eax)
 8048318:	14 a0                	adc    $0xa0,%al
 804831a:	04 08                	add    $0x8,%al
 804831c:	07                   	pop    %es
 804831d:	03 00                	add    (%eax),%eax
 804831f:	00 18                	add    %bl,(%eax)
 8048321:	a0 04 08 07 05       	mov    0x5070804,%al
 8048326:	00 00                	add    %al,(%eax)
 8048328:	1c a0                	sbb    $0xa0,%al
 804832a:	04 08                	add    $0x8,%al
 804832c:	07                   	pop    %es
 804832d:	06                   	push   %es
	...

Disassembly of section .init:

08048330 <_init>:
 8048330:	53                   	push   %ebx
 8048331:	83 ec 08             	sub    $0x8,%esp
 8048334:	e8 c7 00 00 00       	call   8048400 <__x86.get_pc_thunk.bx>
 8048339:	81 c3 c7 1c 00 00    	add    $0x1cc7,%ebx
 804833f:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048345:	85 c0                	test   %eax,%eax
 8048347:	74 05                	je     804834e <_init+0x1e>
 8048349:	e8 72 00 00 00       	call   80483c0 <__libc_start_main@plt+0x10>
 804834e:	83 c4 08             	add    $0x8,%esp
 8048351:	5b                   	pop    %ebx
 8048352:	c3                   	ret    

Disassembly of section .plt:

08048360 <printf@plt-0x10>:
 8048360:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048366:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804836c:	00 00                	add    %al,(%eax)
	...

08048370 <printf@plt>:
 8048370:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048376:	68 00 00 00 00       	push   $0x0
 804837b:	e9 e0 ff ff ff       	jmp    8048360 <_init+0x30>

08048380 <__stack_chk_fail@plt>:
 8048380:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048386:	68 08 00 00 00       	push   $0x8
 804838b:	e9 d0 ff ff ff       	jmp    8048360 <_init+0x30>

08048390 <puts@plt>:
 8048390:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048396:	68 10 00 00 00       	push   $0x10
 804839b:	e9 c0 ff ff ff       	jmp    8048360 <_init+0x30>

080483a0 <strlen@plt>:
 80483a0:	ff 25 18 a0 04 08    	jmp    *0x804a018
 80483a6:	68 18 00 00 00       	push   $0x18
 80483ab:	e9 b0 ff ff ff       	jmp    8048360 <_init+0x30>

080483b0 <__libc_start_main@plt>:
 80483b0:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 80483b6:	68 20 00 00 00       	push   $0x20
 80483bb:	e9 a0 ff ff ff       	jmp    8048360 <_init+0x30>

Disassembly of section .plt.got:

080483c0 <.plt.got>:
 80483c0:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 80483c6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

080483d0 <_start>:
 80483d0:	31 ed                	xor    %ebp,%ebp
 80483d2:	5e                   	pop    %esi
 80483d3:	89 e1                	mov    %esp,%ecx
 80483d5:	83 e4 f0             	and    $0xfffffff0,%esp
 80483d8:	50                   	push   %eax
 80483d9:	54                   	push   %esp
 80483da:	52                   	push   %edx
 80483db:	68 30 86 04 08       	push   $0x8048630
 80483e0:	68 d0 85 04 08       	push   $0x80485d0
 80483e5:	51                   	push   %ecx
 80483e6:	56                   	push   %esi
 80483e7:	68 fb 84 04 08       	push   $0x80484fb
 80483ec:	e8 bf ff ff ff       	call   80483b0 <__libc_start_main@plt>
 80483f1:	f4                   	hlt    
 80483f2:	66 90                	xchg   %ax,%ax
 80483f4:	66 90                	xchg   %ax,%ax
 80483f6:	66 90                	xchg   %ax,%ax
 80483f8:	66 90                	xchg   %ax,%ax
 80483fa:	66 90                	xchg   %ax,%ax
 80483fc:	66 90                	xchg   %ax,%ax
 80483fe:	66 90                	xchg   %ax,%ax

08048400 <__x86.get_pc_thunk.bx>:
 8048400:	8b 1c 24             	mov    (%esp),%ebx
 8048403:	c3                   	ret    
 8048404:	66 90                	xchg   %ax,%ax
 8048406:	66 90                	xchg   %ax,%ax
 8048408:	66 90                	xchg   %ax,%ax
 804840a:	66 90                	xchg   %ax,%ax
 804840c:	66 90                	xchg   %ax,%ax
 804840e:	66 90                	xchg   %ax,%ax

08048410 <deregister_tm_clones>:
 8048410:	b8 2b a0 04 08       	mov    $0x804a02b,%eax
 8048415:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804841a:	83 f8 06             	cmp    $0x6,%eax
 804841d:	76 1a                	jbe    8048439 <deregister_tm_clones+0x29>
 804841f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048424:	85 c0                	test   %eax,%eax
 8048426:	74 11                	je     8048439 <deregister_tm_clones+0x29>
 8048428:	55                   	push   %ebp
 8048429:	89 e5                	mov    %esp,%ebp
 804842b:	83 ec 14             	sub    $0x14,%esp
 804842e:	68 28 a0 04 08       	push   $0x804a028
 8048433:	ff d0                	call   *%eax
 8048435:	83 c4 10             	add    $0x10,%esp
 8048438:	c9                   	leave  
 8048439:	f3 c3                	repz ret 
 804843b:	90                   	nop
 804843c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08048440 <register_tm_clones>:
 8048440:	b8 28 a0 04 08       	mov    $0x804a028,%eax
 8048445:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804844a:	c1 f8 02             	sar    $0x2,%eax
 804844d:	89 c2                	mov    %eax,%edx
 804844f:	c1 ea 1f             	shr    $0x1f,%edx
 8048452:	01 d0                	add    %edx,%eax
 8048454:	d1 f8                	sar    %eax
 8048456:	74 1b                	je     8048473 <register_tm_clones+0x33>
 8048458:	ba 00 00 00 00       	mov    $0x0,%edx
 804845d:	85 d2                	test   %edx,%edx
 804845f:	74 12                	je     8048473 <register_tm_clones+0x33>
 8048461:	55                   	push   %ebp
 8048462:	89 e5                	mov    %esp,%ebp
 8048464:	83 ec 10             	sub    $0x10,%esp
 8048467:	50                   	push   %eax
 8048468:	68 28 a0 04 08       	push   $0x804a028
 804846d:	ff d2                	call   *%edx
 804846f:	83 c4 10             	add    $0x10,%esp
 8048472:	c9                   	leave  
 8048473:	f3 c3                	repz ret 
 8048475:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048480 <__do_global_dtors_aux>:
 8048480:	80 3d 28 a0 04 08 00 	cmpb   $0x0,0x804a028
 8048487:	75 13                	jne    804849c <__do_global_dtors_aux+0x1c>
 8048489:	55                   	push   %ebp
 804848a:	89 e5                	mov    %esp,%ebp
 804848c:	83 ec 08             	sub    $0x8,%esp
 804848f:	e8 7c ff ff ff       	call   8048410 <deregister_tm_clones>
 8048494:	c6 05 28 a0 04 08 01 	movb   $0x1,0x804a028
 804849b:	c9                   	leave  
 804849c:	f3 c3                	repz ret 
 804849e:	66 90                	xchg   %ax,%ax

080484a0 <frame_dummy>:
 80484a0:	b8 10 9f 04 08       	mov    $0x8049f10,%eax
 80484a5:	8b 10                	mov    (%eax),%edx
 80484a7:	85 d2                	test   %edx,%edx
 80484a9:	75 05                	jne    80484b0 <frame_dummy+0x10>
 80484ab:	eb 93                	jmp    8048440 <register_tm_clones>
 80484ad:	8d 76 00             	lea    0x0(%esi),%esi
 80484b0:	ba 00 00 00 00       	mov    $0x0,%edx
 80484b5:	85 d2                	test   %edx,%edx
 80484b7:	74 f2                	je     80484ab <frame_dummy+0xb>
 80484b9:	55                   	push   %ebp
 80484ba:	89 e5                	mov    %esp,%ebp
 80484bc:	83 ec 14             	sub    $0x14,%esp
 80484bf:	50                   	push   %eax
 80484c0:	ff d2                	call   *%edx
 80484c2:	83 c4 10             	add    $0x10,%esp
 80484c5:	c9                   	leave  
 80484c6:	e9 75 ff ff ff       	jmp    8048440 <register_tm_clones>

080484cb <transfer>:
 80484cb:	55                   	push   %ebp
 80484cc:	89 e5                	mov    %esp,%ebp
 80484ce:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484d1:	0f b6 00             	movzbl (%eax),%eax
 80484d4:	84 c0                	test   %al,%al
 80484d6:	74 1f                	je     80484f7 <transfer+0x2c>
 80484d8:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484db:	0f b6 10             	movzbl (%eax),%edx
 80484de:	8b 45 08             	mov    0x8(%ebp),%eax
 80484e1:	88 10                	mov    %dl,(%eax)
 80484e3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 80484e7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 80484eb:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 80484ef:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
 80484f3:	7f d9                	jg     80484ce <transfer+0x3>
 80484f5:	eb 01                	jmp    80484f8 <transfer+0x2d>
 80484f7:	90                   	nop
 80484f8:	90                   	nop
 80484f9:	5d                   	pop    %ebp
 80484fa:	c3                   	ret    

080484fb <main>:
 80484fb:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80484ff:	83 e4 f0             	and    $0xfffffff0,%esp
 8048502:	ff 71 fc             	pushl  -0x4(%ecx)
 8048505:	55                   	push   %ebp
 8048506:	89 e5                	mov    %esp,%ebp
 8048508:	51                   	push   %ecx
 8048509:	83 ec 34             	sub    $0x34,%esp
 804850c:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048512:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048515:	31 c0                	xor    %eax,%eax
 8048517:	c7 45 cc 68 65 6c 6c 	movl   $0x6c6c6568,-0x34(%ebp)
 804851e:	c7 45 d0 6f 77 6f 72 	movl   $0x726f776f,-0x30(%ebp)
 8048525:	c7 45 d4 6c 64 21 00 	movl   $0x21646c,-0x2c(%ebp)
 804852c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
 8048533:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 804853a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
 8048541:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 8048548:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
 804854f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 8048556:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 804855d:	83 ec 0c             	sub    $0xc,%esp
 8048560:	8d 45 cc             	lea    -0x34(%ebp),%eax
 8048563:	50                   	push   %eax
 8048564:	e8 37 fe ff ff       	call   80483a0 <strlen@plt>
 8048569:	83 c4 10             	add    $0x10,%esp
 804856c:	89 45 c8             	mov    %eax,-0x38(%ebp)
 804856f:	83 ec 08             	sub    $0x8,%esp
 8048572:	ff 75 c8             	pushl  -0x38(%ebp)
 8048575:	68 50 86 04 08       	push   $0x8048650
 804857a:	e8 f1 fd ff ff       	call   8048370 <printf@plt>
 804857f:	83 c4 10             	add    $0x10,%esp
 8048582:	83 ec 04             	sub    $0x4,%esp
 8048585:	6a 05                	push   $0x5
 8048587:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804858a:	50                   	push   %eax
 804858b:	8d 45 e0             	lea    -0x20(%ebp),%eax
 804858e:	50                   	push   %eax
 804858f:	e8 37 ff ff ff       	call   80484cb <transfer>
 8048594:	83 c4 10             	add    $0x10,%esp
 8048597:	83 ec 0c             	sub    $0xc,%esp
 804859a:	8d 45 e0             	lea    -0x20(%ebp),%eax
 804859d:	50                   	push   %eax
 804859e:	e8 ed fd ff ff       	call   8048390 <puts@plt>
 80485a3:	83 c4 10             	add    $0x10,%esp
 80485a6:	b8 00 00 00 00       	mov    $0x0,%eax
 80485ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
 80485ae:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 80485b5:	74 05                	je     80485bc <main+0xc1>
 80485b7:	e8 c4 fd ff ff       	call   8048380 <__stack_chk_fail@plt>
 80485bc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 80485bf:	c9                   	leave  
 80485c0:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80485c3:	c3                   	ret    
 80485c4:	66 90                	xchg   %ax,%ax
 80485c6:	66 90                	xchg   %ax,%ax
 80485c8:	66 90                	xchg   %ax,%ax
 80485ca:	66 90                	xchg   %ax,%ax
 80485cc:	66 90                	xchg   %ax,%ax
 80485ce:	66 90                	xchg   %ax,%ax

080485d0 <__libc_csu_init>:
 80485d0:	55                   	push   %ebp
 80485d1:	57                   	push   %edi
 80485d2:	56                   	push   %esi
 80485d3:	53                   	push   %ebx
 80485d4:	e8 27 fe ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 80485d9:	81 c3 27 1a 00 00    	add    $0x1a27,%ebx
 80485df:	83 ec 0c             	sub    $0xc,%esp
 80485e2:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 80485e6:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 80485ec:	e8 3f fd ff ff       	call   8048330 <_init>
 80485f1:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 80485f7:	29 c6                	sub    %eax,%esi
 80485f9:	c1 fe 02             	sar    $0x2,%esi
 80485fc:	85 f6                	test   %esi,%esi
 80485fe:	74 25                	je     8048625 <__libc_csu_init+0x55>
 8048600:	31 ff                	xor    %edi,%edi
 8048602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048608:	83 ec 04             	sub    $0x4,%esp
 804860b:	ff 74 24 2c          	pushl  0x2c(%esp)
 804860f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048613:	55                   	push   %ebp
 8048614:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 804861b:	83 c7 01             	add    $0x1,%edi
 804861e:	83 c4 10             	add    $0x10,%esp
 8048621:	39 f7                	cmp    %esi,%edi
 8048623:	75 e3                	jne    8048608 <__libc_csu_init+0x38>
 8048625:	83 c4 0c             	add    $0xc,%esp
 8048628:	5b                   	pop    %ebx
 8048629:	5e                   	pop    %esi
 804862a:	5f                   	pop    %edi
 804862b:	5d                   	pop    %ebp
 804862c:	c3                   	ret    
 804862d:	8d 76 00             	lea    0x0(%esi),%esi

08048630 <__libc_csu_fini>:
 8048630:	f3 c3                	repz ret 

Disassembly of section .fini:

08048634 <_fini>:
 8048634:	53                   	push   %ebx
 8048635:	83 ec 08             	sub    $0x8,%esp
 8048638:	e8 c3 fd ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 804863d:	81 c3 c3 19 00 00    	add    $0x19c3,%ebx
 8048643:	83 c4 08             	add    $0x8,%esp
 8048646:	5b                   	pop    %ebx
 8048647:	c3                   	ret    

Disassembly of section .rodata:

08048648 <_fp_hw>:
 8048648:	03 00                	add    (%eax),%eax
	...

0804864c <_IO_stdin_used>:
 804864c:	01 00                	add    %eax,(%eax)
 804864e:	02 00                	add    (%eax),%al
 8048650:	6c                   	insb   (%dx),%es:(%edi)
 8048651:	65 6e                	outsb  %gs:(%esi),(%dx)
 8048653:	20 6f 66             	and    %ch,0x66(%edi)
 8048656:	20 73 74             	and    %dh,0x74(%ebx)
 8048659:	72 31                	jb     804868c <__GNU_EH_FRAME_HDR+0x28>
 804865b:	3a 20                	cmp    (%eax),%ah
 804865d:	25                   	.byte 0x25
 804865e:	64 0a 00             	or     %fs:(%eax),%al

Disassembly of section .eh_frame_hdr:

08048664 <__GNU_EH_FRAME_HDR>:
 8048664:	01 1b                	add    %ebx,(%ebx)
 8048666:	03 3b                	add    (%ebx),%edi
 8048668:	30 00                	xor    %al,(%eax)
 804866a:	00 00                	add    %al,(%eax)
 804866c:	05 00 00 00 fc       	add    $0xfc000000,%eax
 8048671:	fc                   	cld    
 8048672:	ff                   	(bad)  
 8048673:	ff 4c 00 00          	decl   0x0(%eax,%eax,1)
 8048677:	00 67 fe             	add    %ah,-0x2(%edi)
 804867a:	ff                   	(bad)  
 804867b:	ff 70 00             	pushl  0x0(%eax)
 804867e:	00 00                	add    %al,(%eax)
 8048680:	97                   	xchg   %eax,%edi
 8048681:	fe                   	(bad)  
 8048682:	ff                   	(bad)  
 8048683:	ff 90 00 00 00 6c    	call   *0x6c000000(%eax)
 8048689:	ff                   	(bad)  
 804868a:	ff                   	(bad)  
 804868b:	ff                   	(bad)  
 804868c:	bc 00 00 00 cc       	mov    $0xcc000000,%esp
 8048691:	ff                   	(bad)  
 8048692:	ff                   	(bad)  
 8048693:	ff 08                	decl   (%eax)
 8048695:	01 00                	add    %eax,(%eax)
	...

Disassembly of section .eh_frame:

08048698 <__FRAME_END__-0xe8>:
 8048698:	14 00                	adc    $0x0,%al
 804869a:	00 00                	add    %al,(%eax)
 804869c:	00 00                	add    %al,(%eax)
 804869e:	00 00                	add    %al,(%eax)
 80486a0:	01 7a 52             	add    %edi,0x52(%edx)
 80486a3:	00 01                	add    %al,(%ecx)
 80486a5:	7c 08                	jl     80486af <__GNU_EH_FRAME_HDR+0x4b>
 80486a7:	01 1b                	add    %ebx,(%ebx)
 80486a9:	0c 04                	or     $0x4,%al
 80486ab:	04 88                	add    $0x88,%al
 80486ad:	01 00                	add    %eax,(%eax)
 80486af:	00 20                	add    %ah,(%eax)
 80486b1:	00 00                	add    %al,(%eax)
 80486b3:	00 1c 00             	add    %bl,(%eax,%eax,1)
 80486b6:	00 00                	add    %al,(%eax)
 80486b8:	a8 fc                	test   $0xfc,%al
 80486ba:	ff                   	(bad)  
 80486bb:	ff 60 00             	jmp    *0x0(%eax)
 80486be:	00 00                	add    %al,(%eax)
 80486c0:	00 0e                	add    %cl,(%esi)
 80486c2:	08 46 0e             	or     %al,0xe(%esi)
 80486c5:	0c 4a                	or     $0x4a,%al
 80486c7:	0f 0b                	ud2    
 80486c9:	74 04                	je     80486cf <__GNU_EH_FRAME_HDR+0x6b>
 80486cb:	78 00                	js     80486cd <__GNU_EH_FRAME_HDR+0x69>
 80486cd:	3f                   	aas    
 80486ce:	1a 3b                	sbb    (%ebx),%bh
 80486d0:	2a 32                	sub    (%edx),%dh
 80486d2:	24 22                	and    $0x22,%al
 80486d4:	1c 00                	sbb    $0x0,%al
 80486d6:	00 00                	add    %al,(%eax)
 80486d8:	40                   	inc    %eax
 80486d9:	00 00                	add    %al,(%eax)
 80486db:	00 ef                	add    %ch,%bh
 80486dd:	fd                   	std    
 80486de:	ff                   	(bad)  
 80486df:	ff 30                	pushl  (%eax)
 80486e1:	00 00                	add    %al,(%eax)
 80486e3:	00 00                	add    %al,(%eax)
 80486e5:	41                   	inc    %ecx
 80486e6:	0e                   	push   %cs
 80486e7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 80486ed:	6c                   	insb   (%dx),%es:(%edi)
 80486ee:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
 80486f1:	04 00                	add    $0x0,%al
 80486f3:	00 28                	add    %ch,(%eax)
 80486f5:	00 00                	add    %al,(%eax)
 80486f7:	00 60 00             	add    %ah,0x0(%eax)
 80486fa:	00 00                	add    %al,(%eax)
 80486fc:	ff                   	(bad)  
 80486fd:	fd                   	std    
 80486fe:	ff                   	(bad)  
 80486ff:	ff c9                	dec    %ecx
 8048701:	00 00                	add    %al,(%eax)
 8048703:	00 00                	add    %al,(%eax)
 8048705:	44                   	inc    %esp
 8048706:	0c 01                	or     $0x1,%al
 8048708:	00 47 10             	add    %al,0x10(%edi)
 804870b:	05 02 75 00 43       	add    $0x43007502,%eax
 8048710:	0f 03 75 7c          	lsl    0x7c(%ebp),%esi
 8048714:	06                   	push   %es
 8048715:	02 b6 0c 01 00 41    	add    0x4100010c(%esi),%dh
 804871b:	c5 43 0c             	lds    0xc(%ebx),%eax
 804871e:	04 04                	add    $0x4,%al
 8048720:	48                   	dec    %eax
 8048721:	00 00                	add    %al,(%eax)
 8048723:	00 8c 00 00 00 a8 fe 	add    %cl,-0x1580000(%eax,%eax,1)
 804872a:	ff                   	(bad)  
 804872b:	ff 5d 00             	lcall  *0x0(%ebp)
 804872e:	00 00                	add    %al,(%eax)
 8048730:	00 41 0e             	add    %al,0xe(%ecx)
 8048733:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 8048739:	87 03                	xchg   %eax,(%ebx)
 804873b:	41                   	inc    %ecx
 804873c:	0e                   	push   %cs
 804873d:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 8048743:	83 05 4e 0e 20 69 0e 	addl   $0xe,0x69200e4e
 804874a:	24 44                	and    $0x44,%al
 804874c:	0e                   	push   %cs
 804874d:	28 44 0e 2c          	sub    %al,0x2c(%esi,%ecx,1)
 8048751:	41                   	inc    %ecx
 8048752:	0e                   	push   %cs
 8048753:	30 4d 0e             	xor    %cl,0xe(%ebp)
 8048756:	20 47 0e             	and    %al,0xe(%edi)
 8048759:	14 41                	adc    $0x41,%al
 804875b:	c3                   	ret    
 804875c:	0e                   	push   %cs
 804875d:	10 41 c6             	adc    %al,-0x3a(%ecx)
 8048760:	0e                   	push   %cs
 8048761:	0c 41                	or     $0x41,%al
 8048763:	c7                   	(bad)  
 8048764:	0e                   	push   %cs
 8048765:	08 41 c5             	or     %al,-0x3b(%ecx)
 8048768:	0e                   	push   %cs
 8048769:	04 00                	add    $0x0,%al
 804876b:	00 10                	add    %dl,(%eax)
 804876d:	00 00                	add    %al,(%eax)
 804876f:	00 d8                	add    %bl,%al
 8048771:	00 00                	add    %al,(%eax)
 8048773:	00 bc fe ff ff 02 00 	add    %bh,0x2ffff(%esi,%edi,8)
 804877a:	00 00                	add    %al,(%eax)
 804877c:	00 00                	add    %al,(%eax)
	...

08048780 <__FRAME_END__>:
 8048780:	00 00                	add    %al,(%eax)
	...

Disassembly of section .init_array:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	a0                   	.byte 0xa0
 8049f09:	84 04 08             	test   %al,(%eax,%ecx,1)

Disassembly of section .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	80                   	.byte 0x80
 8049f0d:	84 04 08             	test   %al,(%eax,%ecx,1)

Disassembly of section .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Disassembly of section .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	30 83 04 08 0d 00    	xor    %al,0xd0804(%ebx)
 8049f26:	00 00                	add    %al,(%eax)
 8049f28:	34 86                	xor    $0x86,%al
 8049f2a:	04 08                	add    $0x8,%al
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	4c                   	dec    %esp
 8049f59:	82                   	(bad)  
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	73 00                	jae    8049f6a <_DYNAMIC+0x56>
 8049f6a:	00 00                	add    %al,(%eax)
 8049f6c:	0b 00                	or     (%eax),%eax
 8049f6e:	00 00                	add    %al,(%eax)
 8049f70:	10 00                	adc    %al,(%eax)
 8049f72:	00 00                	add    %al,(%eax)
 8049f74:	15 00 00 00 00       	adc    $0x0,%eax
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	28 00                	sub    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 08                	add    %cl,(%eax)
 8049f99:	83 04 08 11          	addl   $0x11,(%eax,%ecx,1)
 8049f9d:	00 00                	add    %al,(%eax)
 8049f9f:	00 00                	add    %al,(%eax)
 8049fa1:	83 04 08 12          	addl   $0x12,(%eax,%ecx,1)
 8049fa5:	00 00                	add    %al,(%eax)
 8049fa7:	00 08                	add    %cl,(%eax)
 8049fa9:	00 00                	add    %al,(%eax)
 8049fab:	00 13                	add    %dl,(%ebx)
 8049fad:	00 00                	add    %al,(%eax)
 8049faf:	00 08                	add    %cl,(%eax)
 8049fb1:	00 00                	add    %al,(%eax)
 8049fb3:	00 fe                	add    %bh,%dh
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f d0             	ljmp   *-0x30(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f c0             	ljmp   *-0x40(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Disassembly of section .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
			8049ffc: R_386_GLOB_DAT	__gmon_start__
	...

Disassembly of section .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	76 83                	jbe    8049f91 <_DYNAMIC+0x7d>
			804a00c: R_386_JUMP_SLOT	printf@GLIBC_2.0
 804a00e:	04 08                	add    $0x8,%al
 804a010:	86 83 04 08 96 83    	xchg   %al,-0x7c69f7fc(%ebx)
			804a010: R_386_JUMP_SLOT	__stack_chk_fail@GLIBC_2.4
			804a014: R_386_JUMP_SLOT	puts@GLIBC_2.0
 804a016:	04 08                	add    $0x8,%al
 804a018:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
			804a018: R_386_JUMP_SLOT	strlen@GLIBC_2.0
 804a019:	83 04 08 b6          	addl   $0xffffffb6,(%eax,%ecx,1)
			804a01c: R_386_JUMP_SLOT	__libc_start_main@GLIBC_2.0
 804a01d:	83                   	.byte 0x83
 804a01e:	04 08                	add    $0x8,%al

Disassembly of section .data:

0804a020 <__data_start>:
 804a020:	00 00                	add    %al,(%eax)
	...

0804a024 <__dso_handle>:
 804a024:	00 00                	add    %al,(%eax)
	...

Disassembly of section .bss:

0804a028 <__bss_start>:
 804a028:	00 00                	add    %al,(%eax)
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x80482b8>
   a:	74 75                	je     81 <_init-0x80482af>
   c:	20 35 2e 33 2e 31    	and    %dh,0x312e332e
  12:	2d 31 34 75 62       	sub    $0x62753431,%eax
  17:	75 6e                	jne    87 <_init-0x80482a9>
  19:	74 75                	je     90 <_init-0x80482a0>
  1b:	32 29                	xor    (%ecx),%ch
  1d:	20 35 2e 33 2e 31    	and    %dh,0x312e332e
  23:	20 32                	and    %dh,(%edx)
  25:	30 31                	xor    %dh,(%ecx)
  27:	36 30 34 31          	xor    %dh,%ss:(%ecx,%esi,1)
  2b:	33 00                	xor    (%eax),%eax
